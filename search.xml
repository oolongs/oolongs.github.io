<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mysql 批量添加时主键冲突的问题解决方案</title>
    <url>/2020/04/13/Mysql-%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E6%97%B6%E4%B8%BB%E9%94%AE%E5%86%B2%E7%AA%81%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>三种解决方案推荐</p>
<a id="more"></a>
<h4 id="1、ignore关键字-直接跳过"><a href="#1、ignore关键字-直接跳过" class="headerlink" title="1、ignore关键字 直接跳过"></a>1、ignore关键字 直接跳过</h4><p>插入数据已经出现在DB中，因此在出现冲突的时候我们可以选择直接跳过，把能插入的插入就好。使用ignore</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">insert ignore into <span class="title">table</span> <span class="params">(x,x,x,x)</span> <span class="title">values</span><span class="params">(x,x,x,x)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="2、Replace-into新数据更换旧数据"><a href="#2、Replace-into新数据更换旧数据" class="headerlink" title="2、Replace into新数据更换旧数据"></a>2、Replace into新数据更换旧数据</h4><p>新数据替换旧数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">replace into `user` (X,X,X,X) VALUES(X,X,X,X)</span><br></pre></td></tr></table></figure>
<p>–实际过程是删除冲突数据 插入新的数据</p>
<h4 id="3，ON-DUPLICATE-KEY-UPDATE-直接更新旧数据"><a href="#3，ON-DUPLICATE-KEY-UPDATE-直接更新旧数据" class="headerlink" title="3，ON DUPLICATE KEY UPDATE 直接更新旧数据"></a>3，ON DUPLICATE KEY UPDATE 直接更新旧数据</h4><p>出现冲突时候只是更新部分指定数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">insert into `user` (`id`, `name`, `create_at`, `update_at`) values (<span class="number">1</span>, <span class="string">'test0'</span>, <span class="string">'2018-07-10 18:54:00'</span>, <span class="string">'2018-07-10 18:54:52'</span>) ON DUPLICATE KEY UPDATE `update_at`=<span class="string">'2018-07-10 19:58:05'</span>;</span><br></pre></td></tr></table></figure>
<p>插入中，当冲突时，我们只更新update_at字段，而name的test0没有更新</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql对比Oracle</title>
    <url>/2020/04/13/Mysql%E5%AF%B9%E6%AF%94Oracle/</url>
    <content><![CDATA[<p>在开发过程中，要求代码做到兼容数据库，因此在mapper.xml中对于不兼容的sql，创建了两套sql执行，替换过程中需要注意的函数。</p>
<a id="more"></a>
<h3 id="函数区别："><a href="#函数区别：" class="headerlink" title="函数区别："></a>函数区别：</h3><table>
<thead>
<tr>
<th>ORACLE</th>
<th>mysql</th>
</tr>
</thead>
<tbody><tr>
<td>ceil(-1.001))</td>
<td>ceiling(-1.001)</td>
</tr>
<tr>
<td>SUBSTR(‘abcd’,2,2)</td>
<td>substring(‘abcd’,2,2)</td>
</tr>
<tr>
<td>instr(‘abcdefg’,’ab’)</td>
<td>locate(‘ab’,’abcdefg’) //注意换位置  是否包含某字符串 返回的是字符串的位置</td>
</tr>
<tr>
<td>length（str）</td>
<td>char_length()</td>
</tr>
<tr>
<td>concat (concat (X,x),x)</td>
<td>concat (x,x,x)</td>
</tr>
<tr>
<td>to_char(sysdate,’yyyy-mm-dd’)</td>
<td>date_format(now(),’%Y-%m-%d’)</td>
</tr>
<tr>
<td>to_char(sysdate,’hh24-mi-ss’)</td>
<td>time_format(now(),’%H-%i-%S’)</td>
</tr>
<tr>
<td>to_date(str,format)</td>
<td>STR_TO_DATE(str,format)</td>
</tr>
<tr>
<td>DECODE(iv_sr_status,g_sr_status_com, ld_sys_date, NULL)</td>
<td>IF(exp1,exp2,exp3)/case when then…</td>
</tr>
<tr>
<td>nvl(u.email_address, 10)</td>
<td>IFNULL(u.email_address, 10)/ISNULL(u.email_address)</td>
</tr>
<tr>
<td>trunc(-1.002)</td>
<td>cast(-1.002 as SIGNED)</td>
</tr>
<tr>
<td>TO_NUMBER(“123”)</td>
<td>CAST(“123” AS SIGNED INTEGER)</td>
</tr>
<tr>
<td>SYSDATE</td>
<td>now()/SYSDATE()</td>
</tr>
<tr>
<td>regexp_like(‘aaa’,expr)</td>
<td>aaa’ regexp expr</td>
</tr>
</tbody></table>
<h3 id="语句："><a href="#语句：" class="headerlink" title="语句："></a>语句：</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><pre><code>IF .. THEN..ELSIF ..THEN..END IF;            IF .. THEN..ELSEIF ..THEN..END IF;</code></pre><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><pre><code>1. oracle使用For语句实现循环. Mysql使用Loop语句实现循环. 
2. oracle 使用For…loop关键字. Mysql使用loopLable:LOOP实现循环.</code></pre><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><pre><code>1. oracle 中使用while语句关键字为: while 表达式 loop… end loop;
   mysql 中使用while语句关键字为: while 表达式 do… end while;</code></pre><p><a href="https://blog.csdn.net/qq_42239765/article/details/82842790" target="_blank" rel="noopener">参考文章</a></p>
]]></content>
      <categories>
        <category>oracle</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle分析函数over（）</title>
    <url>/2020/04/13/Oracle%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0over%EF%BC%88%EF%BC%89/</url>
    <content><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h2><p>Oracle从8.1.6开始提供分析函数，分析函数用于计算基于组的某种聚合值，它和聚合函数的不同之处是<br>对于每个组返回多行，而聚合函数对于每个组只返回一行。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">over(partation by clume order by clume)</span><br></pre></td></tr></table></figure>
<p>单独使用order by 可以实现累加</p>
<p><a href="https://www.cnblogs.com/dongyj/p/5992083.html" target="_blank" rel="noopener">参考文章①</a><br><a href="https://www.cnblogs.com/haoshuai1950/p/5160449.html" target="_blank" rel="noopener">参考文章②</a></p>
]]></content>
      <categories>
        <category>oracle</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>启动脚本.sh</title>
    <url>/2020/03/02/%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC-sh-1/</url>
    <content><![CDATA[<p>启动，状态查看，停止，重启</p>
<a id="more"></a>
<h2 id="脚本1"><a href="#脚本1" class="headerlink" title="脚本1"></a>脚本1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh  </span><br><span class="line">d&#x3D;&#96;date &#39;+%Y%m%d%H%M%S&#39;&#96;</span><br><span class="line">nohup java -Xdebug -Xrunjdwp:server&#x3D;y,transport&#x3D;dt_socket,address&#x3D;0.0.0.0:34567,suspend&#x3D;n \</span><br><span class="line">	-server -Xss256k -Xmx3072m -XX:MetaspaceSize&#x3D;512m -XX:MaxMetaspaceSize&#x3D;1024m  \</span><br><span class="line">	-verbose:gc -Xloggc:.&#x2F;gc-$d.log -XX:+PrintGCDetails -XX:-PrintGCTimeStamps -XX:+UseG1GC \</span><br><span class="line">	org.springframework.boot.loader.WarLauncher \</span><br><span class="line">	 &gt;szgd-$d.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<h2 id="脚本2"><a href="#脚本2" class="headerlink" title="脚本2"></a>脚本2</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_211</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">这里可替换为你自己的执行程序，其他代码无需更改</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> APP_NAME=/usr/<span class="built_in">local</span>/spring-cloud/eureka/eureka-service-0.0.1-SNAPSHOT.jar</span></span><br><span class="line">APP_NAME=/opt/app/movie.jar</span><br><span class="line"><span class="meta">#</span><span class="bash">使用说明，用来提示输入参数</span></span><br><span class="line">usage() &#123;</span><br><span class="line">    echo "Usage: sh shell-eureka-service.sh [start|stop|restart|status]"</span><br><span class="line">    exit 1</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">检查程序是否在运行</span></span><br><span class="line">is_exist()&#123;</span><br><span class="line">  pid=`ps -ef|grep $APP_NAME|grep -v grep|awk '&#123;print $2&#125;'`</span><br><span class="line"><span class="meta">  #</span><span class="bash">如果不存在返回1，存在返回0     </span></span><br><span class="line">  if [ -z "$&#123;pid&#125;" ]; then</span><br><span class="line">   return 1</span><br><span class="line">  else</span><br><span class="line">    return 0</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">启动方法</span></span><br><span class="line">start()&#123;</span><br><span class="line">  is_exist</span><br><span class="line">  if [ $? -eq 0 ]; then</span><br><span class="line">    echo "$&#123;APP_NAME&#125; is already running. pid=$&#123;pid&#125;"</span><br><span class="line">  else</span><br><span class="line">    nohup java -jar $&#123;APP_NAME&#125;  &gt;start.log 2&gt;&amp;1 &amp;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">停止方法</span></span><br><span class="line">stop()&#123;</span><br><span class="line">  is_exist</span><br><span class="line">  if [ $? -eq "0" ]; then</span><br><span class="line">    kill -9 $pid</span><br><span class="line">  else</span><br><span class="line">    echo "$&#123;APP_NAME&#125; is not running"</span><br><span class="line">  fi  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">输出运行状态</span></span><br><span class="line">status()&#123;</span><br><span class="line">  is_exist</span><br><span class="line">  if [ $? -eq "0" ]; then</span><br><span class="line">    echo "$&#123;APP_NAME&#125; is running. Pid is $&#123;pid&#125;"</span><br><span class="line">  else</span><br><span class="line">    echo "$&#123;APP_NAME&#125; is NOT running."</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">restart()&#123;</span><br><span class="line">  stop</span><br><span class="line">  sleep 5</span><br><span class="line">  start</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">根据输入参数，选择执行对应方法，不输入则执行使用说明</span></span><br><span class="line">case "$1" in</span><br><span class="line">  "start")</span><br><span class="line">    start</span><br><span class="line">    ;;</span><br><span class="line">  "stop")</span><br><span class="line">    stop</span><br><span class="line">    ;;</span><br><span class="line">  "status")</span><br><span class="line">    status</span><br><span class="line">    ;;</span><br><span class="line">  "restart")</span><br><span class="line">    restart</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    usage</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p>使用   ./ xxx.sh  stop</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle递归函数</title>
    <url>/2020/04/13/Oracle%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>言归正传所谓递归查询那么数据表中数据的结构应该是符合递归查询的基本条件，即表中有ID,PID（节点编号、父节点编号）如果把数据以UI的方式展现出来应该是一棵或多棵树了。</p>
<a id="more"></a>

<p>我们要以其中一个节点去递归查询出这个节点子节点或父节点的过程就是我们所要说明的</p>
<p><strong>基本语法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select ... from tablename where 条件4 start with 条件1 connect by 条件2 AND 条件3</span><br></pre></td></tr></table></figure>
<p><strong>解析</strong></p>
<p>条件1<br>     是根结点的限定语句，当然可以放宽限定条件，以取得多个根结点，实际就是多棵树。<br>条件2<br>      是连接条件，其中用PRIOR表示上一条记录，比如 CONNECT BY PRIOR org_id = parent_id就是说上一条记录的org_id 是本条记录的parent_id，即本记录的父亲是上一条记录。<br>条件4<br>      是过滤条件，用于对返回的所有记录进行过滤。</p>
<p><strong>试着理解</strong></p>
<h6 id="eg"><a href="#eg" class="headerlink" title="eg:"></a>eg:</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> select * from table</span><br><span class="line"> start with org_id &#x3D; &#39;HBHqfWGWPy&#39;</span><br><span class="line"> connect by prior org_id &#x3D; parent_id;</span><br></pre></td></tr></table></figure>
<p>简单说来是将一个树状结构存储在一张表里，比如一个表中存在两个字段:<br> org_id,parent_id那么通过表示每一条记录的parent是谁，就可以形成一个树状结构。</p>
<p><em>优秀案例推荐:</em> <a href="https://www.linuxidc.com/Linux/2013-06/85879.htm" target="_blank" rel="noopener">Oracle 递归查询</a></p>
<p>项目中实际应用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">DISTINCT(A.ID),A.CATEGORY_ID,A.PARENT_CODE,A.NAME,A.CODE,A.SORT,B.NAME AS </span><br><span class="line">pName,CASE WHEN b.CODE IS NULL THEN &#39;614234E9C4DC41D19EAFFA6BB2613D55&#39; ELSE b.CODE </span><br><span class="line">END AS pCode,A.STATE,A.CREATED_BY,A.CREATION_DATE,A.LAST_UPDATED_BY,A.LAST_UPDATE_DATE FROM </span><br><span class="line">DICTIONARY ALEFT JOIN DICTIONARY B ON A.PARENT_CODE &#x3D; B.CODE AND B.CATEGORY_ID &#x3D; </span><br><span class="line">#&#123;categoryId, jdbcType&#x3D;NUMERIC&#125;WHERE A.STATE &#x3D; 0 AND A.CATEGORY_ID &#x3D; #&#123;categoryId, jdbcType&#x3D;NUMERIC&#125;START WITH A.NAME LIKE CONCAT(CONCAT(&#39;%&#39;, #&#123;name, jdbcType&#x3D;VARCHAR&#125;), &#39;%&#39;)CONNECT BY PRIOR A.PARENT_CODE &#x3D; A.CODE ORDER BY CODE ASC</span><br></pre></td></tr></table></figure>
<p>自行理解吧</p>
<p>参考文章地址：<a href="https://www.linuxidc.com/Linux/2014-06/102687.htm" target="_blank" rel="noopener">Oracle递归函数</a></p>
]]></content>
      <categories>
        <category>oracle</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket前后端消息推送-DEMO</title>
    <url>/2020/03/09/%E7%AB%AF%E5%8F%A3%E8%BF%9B%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>WebSocket协议，客户端和服务端都可以主动的推送消息，可以是文本也可以是二进制数据。而且没有同源策略的限制，不存在跨域问题。协议的标识符就是ws。像https一样如果加密的话就是wxs。</p>
<a id="more"></a>
<p>代码经过实战：<a href="https://gitee.com/pandagit3/demo" target="_blank" rel="noopener">GIT地址</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>webSocket</tag>
      </tags>
  </entry>
</search>
